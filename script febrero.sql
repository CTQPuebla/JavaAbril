-- este es un comentario
--crear una tabla

CREATE TABLE EMPLEADO(
EMPLEADO_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(15),
FECHA_REGISTRO DATE,
SEXO CHAR(1),
ESTADO_CIVIL NVARCHAR2(10),
FECHA_NAC DATE,
CARGO_ID NUMBER,
STATUS NUMBER,
CONSTRAINT CHECK_SEXO CHECK (SEXO IN('M','F')),
CONSTRAINT CHECK_ESTADO_CIVIL CHECK (ESTADO_CIVIL IN('SOLTERO','CASADO','VIUDO','DIVORCIADO'))
);


TRUNCATE TABLE EMPLEADO;
ALTER TABLE EMPLEADO RENAME COLUMN ANTIGUEDAD TO FECHA_REGISTRO;
ALTER TABLE EMPLEADO MODIFY FECHA_REGISTRO DATE;
DESCRIBE EMPLEADO;


--CAMBIAR TIPO DE DATO DE UNA COLUMNA
--ALTER TABLE NOMBRETABLA MODIFY COLUMNA NUEVOTIPODATO;
ALTER TABLE EMPLEADO MODIFY ANTIGUEDAD DATE;

--MUESTRA LA ESTRUCTURA ACTUAL DE UNA TABLA
DESCRIBE EMPLEADO;
DESCRIBE CARGOS;

SELECT  * FROM EMPLEADO;
COMMIT;

SELECT COUNT(EMPLEADO_ID) FROM EMPLEADO WHERE NOMBRE='PEDRO';

CREATE TABLE CARGOS(
CARGO_ID NUMBER PRIMARY KEY,
DESCRIPCION NVARCHAR2(20),
SUELDO NUMBER(5,2)  --999.99
);

SELECT * FROM EMPLEADO;
commit;

--CREAR SECUENCIA
CREATE SEQUENCE EMPLEADO_SEQ;

--INSERCION REGISTROS MANUALMENTE
INSERT INTO EMPLEADO VALUES (1,'PEDRO','01/01/1980','M','SOLTERO','09/10/1990',2,1);
INSERT INTO EMPLEADO VALUES(2,'ARMANDO','01/01/1980','M','CASADO','01/12/1985',3,1);
INSERT INTO EMPLEADO VALUES(3,'IRVING','01/01/1980','M','SOLTERO','23/05/1996',5,1);
INSERT INTO EMPLEADO VALUES(4,'JUAN','01/01/1980','M','SOLTERO','09/05/1999',6,1);
INSERT INTO EMPLEADO VALUES(5,'ALFREDO','01/01/1980','M','CASADO','28/02/1950',1,1);


INSERT INTO CARGOS VALUES(1,'CEO',999.99);
INSERT INTO CARGOS VALUES(2,'GERENTE',990.99);
INSERT INTO CARGOS VALUES(3,'ADMINISTRADOR',900.99);
INSERT INTO CARGOS VALUES(4,'LIDER TECNICO',850.99);
INSERT INTO CARGOS VALUES(5,'SCRUM MASTER',800.99);
INSERT INTO CARGOS VALUES(6,'DESARROLLADOR',995.99);

SELECT * FROM CARGOS;


CREATE SEQUENCE CARGO_SEQ;

-- VER TODO LO QUE HAY EN LA TABLA
SELECT * FROM EMPLEADO;
SELECT * FROM CARGOS;

COMMIT;

--INSERCION DE REGISTROS SIN ID

--'2000/12/12'

INSERT ALL
INTO CARGOS(DESCRIPCION,SUELDO)
VALUES('AUXILIAR', 400.50)
INTO CARGOS(DESCRIPCION,SUELDO)
VALUES('AUXILIAR', 400.50)
INTO CARGOS(DESCRIPCION,SUELDO)
VALUES('AUXILIAR', 400.50)
SELECT * FROM DUAL;





--EMPLEADO E
--CARGO C
SELECT E.NOMBRE, E.ANTIGUEDAD, E.SEXO, E.ESTADO_CIVIL, E.FECHA_NAC, C.DESCRIPCION, C.SUELDO
FROM EMPLEADO E INNER JOIN CARGOS C
ON E.CARGO_ID = C.CARGO_ID WHERE E.EMPLEADO_ID = 5;

SELECT C.DESCRIPCION, E.*
FROM EMPLEADO E INNER JOIN CARGOS C
ON E.CARGO_ID = C.CARGO_ID WHERE C.CARGO_ID=3;


commit;
-- BORRAR UNA COLUMNA DE TABLA EXISTENTE
ALTER TABLE EMPLEADO DROP COLUMN SUELDO;
ALTER TABLE EMPLEADO DROP COLUMN PUESTO;

--AÑADIR UN CAMPO A UNA TABLA EXISTENTE
ALTER TABLE EMPLEADO ADD CARGO_ID NUMBER;

--TRUNCAR TABLA (VACIAR LA INFORMACION SIN BORRAR LA TABLA)
TRUNCATE TABLE EMPLEADO;

--VER ESTADO ACTUAL O ESTRUCTURA DE UNA TABLA
DESCRIBE EMPLEADO;

--CREAR LLAVE FORANEA
ALTER TABLE EMPLEADO ADD CONSTRAINT EMP_FK_CARGO_ID
FOREIGN KEY(CARGO_ID)
REFERENCES CARGOS(CARGO_ID);

ALTER TABLE EMPLEADO ADD STATUS NUMBER;

SELECT * FROM EMPLEADO;

--UPDATES
UPDATE EMPLEADO SET STATUS = 0 WHERE EMPLEADO_ID = 6;
COMMIT;

ALTER TABLE EMPLEADO DROP CONSTRAINT EMP_FK_CARGO_ID;   

TRUNCATE TABLE EMPLEADO;
TRUNCATE TABLE CARGOS;

-- BUSQUEDA POR ID
SELECT * FROM EMPLEADO WHERE EMPLEADO_ID = 3;
SELECT * FROM EMPLEADO WHERE NOMBRE = 'JUAN';

-- BUSCAR LA INFORMACION DEL EMPLEADO CON CARGO ADMINISTRADOR
--SUBCONSULTAS
SELECT * FROM EMPLEADO WHERE CARGO_ID =
(SELECT CARGO_ID FROM CARGOS WHERE DESCRIPCION='ADMINISTRADOR');

DESCRIBE EMPLEADO;
DESCRIBE CARGOS;
--JOIN
-- EMPLEADO E
-- CARGOS C
SELECT E.NOMBRE, E.ANTIGUEDAD, C.DESCRIPCION
FROM EMPLEADO E INNER JOIN CARGOS C  -- AQUI SE PEGAN LAS N TABLAS CON LAS QUE ESTES TRABAJANDO
ON E.CARGO_ID = C.CARGO_ID;--WHERE C.DESCRIPCION = 'ADMINISTRADOR';  --DONDE SE VAN A PEGAR (CAMPO EN COMUN)



CREATE OR REPLACE TRIGGER ON_INSERT_EMPLEADO BEFORE
INSERT ON EMPLEADO FOR EACH ROW BEGIN
SELECT EMPLEADO_SEQ.NEXTVAL INTO :new.EMPLEADO_ID FROM dual;
END;

CREATE OR REPLACE TRIGGER ON_INSERT_CARGO BEFORE
INSERT ON CARGOS FOR EACH ROW BEGIN
SELECT CARGO_SEQ.NEXTVAL INTO :new.CARGO_ID FROM dual;
END;



---------------------------------------------------------------------------------------------------------
CREATE TABLE CLIENTES(
CLIENTE_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(15), --obligatorio, nomas de 15 caracteres, 
TELEFONO NVARCHAR2(10),  -- no mas de 10 , no deber ser nulo, blank, 
CORREO NVARCHAR2(15), -- no debe ser nulo, no debe quedar blanco, pattern (expresion), no se debe repetir
STATUS NUMBER 
);

CREATE TABLE PRODUCTOS(
PRODUCTO_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(20),
PRESENTACION NVARCHAR2(20),
PRECIO NUMBER(5,2),
FECHA_CAD DATE,
MARCA NVARCHAR2(15),
PROVEEDOR_ID NUMBER,
CATEGORIA_ID NUMBER,
STATUS NUMBER
);

CREATE TABLE INVENTARIO(
INVENTARIO_ID NUMBER PRIMARY KEY,
PRODUCTO_ID NUMBER,
STOCK NUMBER,
FECHA_RESURTIDO DATE
);

CREATE TABLE VENTAS(
VENTA_ID NUMBER PRIMARY KEY,
CLIENTE_ID NUMBER,
FECHA_VENTA DATE
);

CREATE TABLE DETALLE_VENTAS(
DTV_ID NUMBER PRIMARY KEY,
VENTA_ID NUMBER,
PRODUCTO_ID NUMBER,
CANTIDAD NUMBER
);

CREATE TABLE CATEGORIAS(
CATEGORIA_ID NUMBER PRIMARY KEY,
DESCRIPCION NVARCHAR2(20)
);


CREATE TABLE PROVEEDORES(
PROVEEDOR_ID NUMBER PRIMARY KEY,
RAZON_SOCIAL NVARCHAR2(20),
EMAIL NVARCHAR2(20),
TELEFONO NVARCHAR2(10)
);

--SELECTS
SELECT * FROM DETALLE_VENTAS;
SELECT * FROM VENTAS;
SELECT * FROM CLIENTES;
SELECT * FROM PRODUCTOS;
SELECT * FROM INVENTARIO;
SELECT * FROM PROVEEDORES;
SELECT * FROM CATEGORIAS;

COMMIT;


DESCRIBE DETALLE_VENTAS;
DESCRIBE VENTAS;
DESCRIBE CLIENTES;
DESCRIBE PRODUCTOS;
DESCRIBE INVENTARIO;
DESCRIBE PROVEEDORES;
DESCRIBE CATEGORIAS;


COMMIT;


--LLAVES

ALTER TABLE VENTAS ADD CONSTRAINT VENTA_FK_CLIENTE_ID
FOREIGN KEY(CLIENTE_ID)
REFERENCES CLIENTES(CLIENTE_ID);

ALTER TABLE DETALLE_VENTAS ADD CONSTRAINT DTV_FK_VENTA_ID
FOREIGN KEY(VENTA_ID)
REFERENCES VENTAS(VENTA_ID);

ALTER TABLE DETALLE_VENTAS ADD CONSTRAINT DTV_FK_PRODUCTO_ID
FOREIGN KEY(PRODUCTO_ID)
REFERENCES PRODUCTOS(PRODUCTO_ID);

ALTER TABLE INVENTARIO ADD CONSTRAINT INV_FK_PRODUCTO_ID
FOREIGN KEY(PRODUCTO_ID)
REFERENCES PRODUCTOS(PRODUCTO_ID);

ALTER TABLE PRODUCTOS ADD CONSTRAINT PRODUCTOS_FK_PROVEEDOR_ID
FOREIGN KEY(PROVEEDOR_ID)
REFERENCES PROVEEDORES(PROVEEDOR_ID);

ALTER TABLE PRODUCTOS ADD CONSTRAINT PRODUCTOS_FK_CATEGORIA_ID
FOREIGN KEY(CATEGORIA_ID)
REFERENCES CATEGORIAS(CATEGORIA_ID);

-------------------------------------------------------------

--SECUENCIAS
CREATE SEQUENCE PRODUCTO_SEQ;
CREATE SEQUENCE CLIENTES_SEQ;
CREATE SEQUENCE VENTAS_SEQ;
CREATE SEQUENCE INVENTARIO_SEQ;
CREATE SEQUENCE CATEGORIAS_SEQ;
CREATE SEQUENCE PROVEEDOR_SEQ;
CREATE SEQUENCE DTV_SEQ;

--TRIGGERS
CREATE OR REPLACE TRIGGER ON_INSERT_PRODUCTOS BEFORE
INSERT ON PRODUCTOS FOR EACH ROW BEGIN
SELECT PRODUCTO_SEQ.NEXTVAL INTO :new.PRODUCTO_ID FROM dual;
END;

CREATE OR REPLACE TRIGGER ON_INSERT_INVENTARIO BEFORE
INSERT ON INVENTARIO FOR EACH ROW BEGIN
SELECT INVENTARIO_SEQ.NEXTVAL INTO :new.INVENTARIO_ID FROM dual;
END;

CREATE OR REPLACE TRIGGER ON_INSERT_CLIENTES BEFORE
INSERT ON CLIENTES FOR EACH ROW BEGIN
SELECT CLIENTES_SEQ.NEXTVAL INTO :new.CLIENTE_ID FROM dual;
END;

CREATE OR REPLACE TRIGGER ON_INSERT_VENTAS BEFORE
INSERT ON VENTAS FOR EACH ROW BEGIN
SELECT VENTAS_SEQ.NEXTVAL INTO :new.VENTA_ID FROM dual;
END;

CREATE OR REPLACE TRIGGER ON_INSERT_DET_VET BEFORE
INSERT ON DETALLE_VENTAS FOR EACH ROW BEGIN
SELECT DTV_SEQ.NEXTVAL INTO :new.DTV_ID FROM dual;
END;

CREATE OR REPLACE TRIGGER ON_INSERT_CATEGORIAS BEFORE
INSERT ON CATEGORIAS FOR EACH ROW BEGIN
SELECT CATEGORIAS_SEQ.NEXTVAL INTO :new.CATEGORIA_ID FROM dual;
END;

CREATE OR REPLACE TRIGGER ON_INSERT_PROVEEDORES BEFORE
INSERT ON PROVEEDORES FOR EACH ROW BEGIN
SELECT PROVEEDOR_SEQ.NEXTVAL INTO :new.PROVEEDOR_ID FROM dual;
END;


-- INSERCION DE VALORES SIN ID
INSERT ALL
INTO PRODUCTOS(NOMBRE, PRESENTACION, PRECIO, FECHA_CAD, MARCA, STATUS)
VALUES('GALLETAS MARIA','PAQUETE 60 GRS', 20, '12/12/2000', 'GAMESA',1)
INTO PRODUCTOS(NOMBRE, PRESENTACION, PRECIO, FECHA_CAD, MARCA, STATUS)
VALUES('YOGHURT LALA','BOTE 1 LT', 26, '03/10/2004', 'LALA',1)
INTO PRODUCTOS(NOMBRE, PRESENTACION, PRECIO, FECHA_CAD,MARCA, STATUS)
VALUES('JAMON SERRANO','PAQUETE 1KG', 92, '21/04/2009', 'CAMPISTRANO',1)
INTO PRODUCTOS(NOMBRE, PRESENTACION, PRECIO, FECHA_CAD,MARCA, STATUS)
VALUES('CHOCOMILK','BOLSA 90 GRS', 36, '17/07/2010', 'CHOCOMILK',1)
SELECT * FROM DUAL;

INSERT ALL
INTO EMPLEADO(NOMBRE, ANTIGUEDAD, SEXO, ESTADO_CIVIL, FECHA_NAC, CARGO_ID)
VALUES('FERNANDO', 12,'M','CASADO','12-05-2001',4)
INTO EMPLEADO(NOMBRE, ANTIGUEDAD, SEXO, ESTADO_CIVIL, FECHA_NAC, CARGO_ID)
VALUES('ANGELA', 3,'F','SOLTERO','11-11-1999',2)
INTO EMPLEADO(NOMBRE, ANTIGUEDAD, SEXO, ESTADO_CIVIL, FECHA_NAC, CARGO_ID)
VALUES('LAURA', 6,'F','CASADO','23-02-2003',3)
SELECT * FROM DUAL;


INSERT ALL
INTO INVENTARIO(PRODUCTO_ID, STOCK, FECHA_RESURTIDO)
VALUES(3,10,'22/07/2017')
INTO INVENTARIO(PRODUCTO_ID, STOCK, FECHA_RESURTIDO)
VALUES(4,70,'11/07/2001')
INTO INVENTARIO(PRODUCTO_ID, STOCK, FECHA_RESURTIDO)
VALUES(5,12,'25/12/2009')
INTO INVENTARIO(PRODUCTO_ID, STOCK, FECHA_RESURTIDO)
VALUES(6,5,'18/11/2002')
INTO INVENTARIO(PRODUCTO_ID, STOCK, FECHA_RESURTIDO)
VALUES(7,30,'28/02/2007')
INTO INVENTARIO(PRODUCTO_ID, STOCK, FECHA_RESURTIDO)
VALUES(8,30,'12/01/2011')
SELECT * FROM DUAL;


INSERT ALL
INTO CLIENTES(NOMBRE, TELEFONO, CORREO, STATUS)
VALUES('ANGEL','0987654321', 'ANGEL@MAIL.COM',1)
INTO CLIENTES(NOMBRE, TELEFONO, CORREO, STATUS)
VALUES('MAYRA','234865287', 'MAYRA@MAIL.COM', 1)
INTO CLIENTES(NOMBRE, TELEFONO, CORREO, STATUS)
VALUES('GABY','0345734545', 'GABY@MAIL.COM', 1)
SELECT * FROM DUAL;

INSERT ALL
INTO VENTAS(CLIENTE_ID,FECHA_VENTA )
VALUES(1,'27/03/2020')
INTO VENTAS(CLIENTE_ID,FECHA_VENTA )
VALUES(2,'11/08/2021')
SELECT * FROM DUAL;


INSERT ALL
INTO PRODUCTOS(NOMBRE, PRESENTACION, PRECIO, FECHA_CAD, MARCA, STATUS)
VALUES('GALLETAS MARIA','PAQUETE 60 GRS', 20, '12/12/2000', 'GAMESA',1)
INTO PRODUCTOS(NOMBRE, PRESENTACION, PRECIO, FECHA_CAD, MARCA, STATUS)
VALUES('YOGHURT LALA','BOTE 1 LT', 26, '03/10/2004', 'LALA',1)
INTO PRODUCTOS(NOMBRE, PRESENTACION, PRECIO, FECHA_CAD,MARCA, STATUS)
VALUES('JAMON SERRANO','PAQUETE 1KG', 92, '21/04/2009', 'CAMPISTRANO',1)
INTO PRODUCTOS(NOMBRE, PRESENTACION, PRECIO, FECHA_CAD,MARCA, STATUS)
VALUES('CHOCOMILK','BOLSA 90 GRS', 36, '17/07/2010', 'CHOCOMILK',1)
SELECT * FROM DUAL;


INSERT ALL
INTO CATEGORIAS(DESCRIPCION) VALUES('CARNES FRIAS')
INTO CATEGORIAS(DESCRIPCION) VALUES('ABARROTES')
INTO CATEGORIAS(DESCRIPCION) VALUES('PAPELERIA')
INTO CATEGORIAS(DESCRIPCION) VALUES('FRUTAS Y VERDURAS')
INTO CATEGORIAS(DESCRIPCION) VALUES('BEBIDAS ALCOHOLICAS')
SELECT * FROM DUAL;



INSERT ALL
INTO PROVEEDORES(RAZON_SOCIAL, EMAIL, TELEFONO) VALUES
('RS_1', 'EMAIL_UNO', 'TEL_UNO')
INTO PROVEEDORES(RAZON_SOCIAL, EMAIL, TELEFONO) VALUES
('RS_2', 'EMAIL_DOS', 'TEL_DOS')
INTO PROVEEDORES(RAZON_SOCIAL, EMAIL, TELEFONO) VALUES
('RS_3', 'EMAIL_TRES', 'TEL_TRES')
INTO PROVEEDORES(RAZON_SOCIAL, EMAIL, TELEFONO) VALUES
('RS_4', 'EMAIL_CUATRO', 'TEL_CUATRO')
INTO PROVEEDORES(RAZON_SOCIAL, EMAIL, TELEFONO) VALUES
('RS_5', 'EMAIL_CINCO', 'TEL_CINCO')
SELECT * FROM DUAL;


INSERT ALL
INTO DETALLE_VENTAS(VENTA_ID, PRODUCTO_ID, CANTIDAD)
VALUES(1,2,1)
INTO DETALLE_VENTAS(VENTA_ID, PRODUCTO_ID, CANTIDAD)
VALUES(1,3,5)
INTO DETALLE_VENTAS(VENTA_ID, PRODUCTO_ID, CANTIDAD)
VALUES(1,4,2)
SELECT * FROM DUAL;

--SELECTS
SELECT * FROM DETALLE_VENTAS;
SELECT * FROM VENTAS;
SELECT * FROM CLIENTES;
SELECT * FROM PRODUCTOS;
SELECT * FROM INVENTARIO;
SELECT * FROM PROVEEDORES;
SELECT * FROM CATEGORIAS;


DESCRIBE DETALLE_VENTAS;
DESCRIBE VENTAS;
DESCRIBE CLIENTES;
DESCRIBE PRODUCTOS;
DESCRIBE INVENTARIO;
DESCRIBE PROVEEDORES;
DESCRIBE CATEGORIAS;

commit;


--RESTRICCION UNIQUE PARA LOS VALORES DE ALGUN CAMPO
ALTER TABLE INVENTARIO ADD CONSTRAINT UNQ_INV_PRODUCTO_ID UNIQUE(PRODUCTO_ID);

--CLIENTES C
--VENTAS V

DESCRIBE VENTAS;

SELECT V.*, C.* FROM CLIENTES C INNER JOIN VENTAS V
ON C.CLIENTE_ID = V.CLIENTE_ID WHERE NOMBRE='GABY';

DESCRIBE productos;

SELECT * FROM VENTAS;
SELECT * FROM CLIENTES;
commit;




---------------------------------------------------------------------------------------------
CREATE OR REPLACE TYPE productosa AS
    VARRAY(100) OF NUMBER;
/

CREATE OR REPLACE TYPE cantidadesa AS
    VARRAY(100) OF NUMBER;
/

CREATE OR REPLACE PROCEDURE insert_venta (
    cliente    NUMBER,
    v_num_prod  productosa,
    v_num_cant  cantidadesa
) IS
BEGIN
    DECLARE
        productosarray   productosa := v_num_prod;
        cantidadesarray  cantidadesa := v_num_cant;
        total            NUMBER := productosarray.count;
        cliente_id      NUMBER := cliente;
        nextventa        NUMBER;
        nextdetalle      NUMBER;
    BEGIN
    --CALCULO EL SIGUIENTE ID DE VENTA BASADO EN EL VALOR
    --DE LA SECUENCIA
        SELECT
            VENTAS_SEQ.NEXTVAL
        INTO nextventa
        FROM
            dual;
--REGISTRO LA NUEVA VENTA (EN VENTAS)
        INSERT INTO ventas VALUES (
            nextventa,
            cliente_id,
            sysdate
        );

-- FOR PARA ITERAR EL TOTAL DE ELEMENTOS
        FOR i IN 1..total LOOP
            SELECT
                DTV_SEQ.NEXTVAL
            INTO nextdetalle
            FROM
                dual;

            INSERT INTO DETALLE_VENTAS VALUES (
                nextdetalle,
                nextventa,
                productosarray(i),
                cantidadesarray(i)
            );

        END LOOP;

        COMMIT;
    END;
END;
/

CALL insert_venta(3, productosa(2,5,8,1,4), cantidadesa(1,1,3,2,4));

SELECT * FROM DETALLE_VENTAS;
SELECT * FROM VENTAS;

--INNER JOIN
SELECT P.* , I.* FROM PRODUCTOS P INNER JOIN INVENTARIO I
ON P.PRODUCTO_ID = I.PRODUCTO_ID;

--LEFT
SELECT P.* , I.* FROM PRODUCTOS P LEFT JOIN INVENTARIO I
ON P.PRODUCTO_ID = I.PRODUCTO_ID;

--RIGHT
SELECT P.* , I.* FROM PRODUCTOS P RIGHT JOIN INVENTARIO I
ON P.PRODUCTO_ID = I.PRODUCTO_ID;



-- VENTAS V
-- PRODUCTOS P
-- DETALLES DT

--SELECT V.CLIENTE_ID,DT.VENTA_ID,DT.PRODUCTO_ID,P.NOMBRE,DT.CANTIDAD, P.PRECIO 
--FROM

--INSERTAR
  --MANUAL
  --AUTOMATIZANDO EL ID
--ACTUALIZAR

--BUSCAR TODOS
--BUSCAR POR ID
--BUSCAR POR ALGUN PARAMETRO DISTINTO AL ID
SELECT  NOMBRE, PRECIO FROM PRODUCTOS WHERE PRESENTACION = 'BOLSA 90 GRS';

--BUSCAR POR ALGUNA CONDICION
SELECT NOMBRE,PRECIO,FECHA_CAD FROM PRODUCTOS WHERE PRECIO > 30;

SELECT NOMBRE,PRECIO,FECHA_CAD FROM PRODUCTOS WHERE PRECIO > 10
AND  PRECIO <60;

--LIKE
-- BUSCA VALORES PARECIDOS QUE TENGAN ESOS CARACTERES AL INICIO
SELECT * FROM PRODUCTOS WHERE NOMBRE LIKE 'O%';

-- BUSCA VALORES PARECIDOS QUE TENGAN ESOS CARACTERES AL FINAL
SELECT * FROM PRODUCTOS WHERE NOMBRE LIKE '%O';

-- BUSCA VALORES PARECIDOS QUE TENGAN ESOS CARACTERES EN MEDIO
SELECT * FROM PRODUCTOS WHERE NOMBRE LIKE '%O%';



--MAX
--BUSCAR EL PRODUCTO CON EL MAYOR PRECIO
--                                                    92
SELECT * FROM PRODUCTOS WHERE PRECIO = (SELECT MAX(PRECIO) FROM PRODUCTOS);
SELECT MAX(PRECIO) FROM PRODUCTOS;

--MIN
--BUSCAR EL PRODUCTO CON EL MENOR PRECIO
SELECT * FROM PRODUCTOS WHERE PRECIO = (SELECT MIN(PRECIO) FROM PRODUCTOS);

--SUM
-- REALIZAR SUMATORIA DE VALORES DE UNA COLUMNA
SELECT SUM(PRECIO) FROM PRODUCTOS;

--AVG
--PROMEDIO DE PRECIOS
SELECT AVG(PRECIO) FROM PRODUCTOS;

--COUNT
SELECT COUNT(EMPLEADO_ID) FROM EMPLEADO WHERE ANTIGUEDAD > 5;
SELECT * FROM EMPLEADO;

--ORDER BY - nombres
SELECT * FROM EMPLEADO ORDER BY NOMBRE ASC;
SELECT * FROM PRODUCTOS ORDER BY PRECIO DESC;

--GROUP BY
SELECT COUNT(ESTADO_CIVIL) CONTEO, ESTADO_CIVIL
FROM EMPLEADO GROUP BY ESTADO_CIVIL;

--AÑADIR UN CAMPO A UNA TABLA EXISTENTE
--ALTER TABLE NOMBRETABLA ADD NOMBRECAMPO TIPODATO;
ALTER TABLE PRODUCTOS ADD MARCA NVARCHAR2(15);

--ACTUALIZAR UN REGISTRO
UPDATE PRODUCTOS SET MARCA = 'VICTORIA'
WHERE PRECIO =22.5;

-- REVERTIR CAMBIO
ROLLBACK;
-- COMPROMETER CAMBIOS
COMMIT;

CREATE TABLE DUMMMY(
ID_DUMMY NUMBER PRIMARY KEY,
DESCRIPCION NVARCHAR2(10)
);

SELECT * FROM DUMMMY;
DROP TABLE DUMMMY;  --INCLUYE AUTOCOMMIT

--BORRAR REGISTROS
DELETE FROM PRODUCTOS WHERE PRODUCTO_ID = 21;
SELECT * FROM PRODUCTOS;


-- TRUNCATE : LIMPIA LA TABLA Y ADEMAS RESETEA LA SECUENCIA ASOCIADA


SELECT COUNT(MARCA), MARCA
FROM PRODUCTOS GROUP BY MARCA;
--JOINS

SELECT * FROM EMPLEADO;
SELECT * FROM CARGOS;
DESCRIBE CARGOS;

DESCRIBE EMPLEADO;



SELECT * FROM INVENTARIO;
SELECT * FROM PRODUCTOS;
SELECT * FROM PROVEEDORES;
SELECT * FROM CATEGORIAS;



UPDATE PRODUCTOS SET PROVEEDOR_ID = 5, CATEGORIA_ID=2 WHERE PRODUCTO_ID = 1;
UPDATE PRODUCTOS SET PROVEEDOR_ID = 3, CATEGORIA_ID=2 WHERE PRODUCTO_ID = 2;
UPDATE PRODUCTOS SET PROVEEDOR_ID = 2, CATEGORIA_ID=1 WHERE PRODUCTO_ID = 3;
UPDATE PRODUCTOS SET PROVEEDOR_ID = 1, CATEGORIA_ID=2 WHERE PRODUCTO_ID = 4;
UPDATE PRODUCTOS SET PROVEEDOR_ID = 4, CATEGORIA_ID=2 WHERE PRODUCTO_ID = 5;
UPDATE PRODUCTOS SET PROVEEDOR_ID = 3, CATEGORIA_ID=2 WHERE PRODUCTO_ID = 6;
UPDATE PRODUCTOS SET PROVEEDOR_ID = 5, CATEGORIA_ID=1 WHERE PRODUCTO_ID = 7;
UPDATE PRODUCTOS SET PROVEEDOR_ID = 1, CATEGORIA_ID=2 WHERE PRODUCTO_ID = 8;


--JOINS: PAREAR 2 O MAS TABLAS

-- INVENTARIO I
-- PRODUCTOS P  
     
SELECT P.NOMBRE, P.PRESENTACION, P.PRECIO, I.STOCK
FROM PRODUCTOS P INNER JOIN INVENTARIO I
ON P.PRODUCTO_ID  = I.PRODUCTO_ID;

--AGREGANDO EL PROVEEDOR A LA ANTERIOR CONSULTA

SELECT P.NOMBRE, P.PRESENTACION, P.PRECIO, PRO.RAZON_SOCIAL, I.STOCK 
FROM PRODUCTOS P INNER JOIN PROVEEDORES PRO 
ON P.PROVEEDOR_ID = PRO.PROVEEDOR_ID INNER JOIN INVENTARIO I
ON P.PRODUCTO_ID = I.PRODUCTO_ID;



SELECT P.*, I.* -- LO QUE QUIERO VER
FROM PRODUCTOS P INNER JOIN INVENTARIO I -- QUE TABLAS SE ESTARAN PEGANDO
ON P.PRODUCTO_ID  = I.PRODUCTO_ID;


SELECT P.NOMBRE, P.PRESENTACION, P.PRECIO, I.STOCK -- LO QUE QUIERO VER
FROM PRODUCTOS P LEFT JOIN INVENTARIO I -- QUE TABLAS SE ESTARAN PEGANDO
ON P.PRODUCTO_ID  = I.PRODUCTO_ID;


--BUSCAR LA INFORMACION DE LOS PRODUCTOS EN LA VENTA NUMERO 1 SUBCONSULTAS
SELECT * FROM PRODUCTOS WHERE PRODUCTO_ID IN 
(SELECT PRODUCTO_ID FROM DETALLE_VENTAS WHERE VENTA_ID = 1);

SELECT * FROM DETALLE_VENTAS;

--BUSCAR LA INFORMACION DE LOS PRODUCTOS EN LA VENTA NUMERO 1  JOINS
-- PRODUCTOS P
-- DETALLE_VENTAS DT
--SELECT DT.VENTA_ID,P.NOMBRE, P.PRESENTACION, P.PRECIO, DT.CANTIDAD
SELECT P.*, DT.*
FROM PRODUCTOS P INNER JOIN DETALLE_VENTAS DT
ON P.PRODUCTO_ID = DT.PRODUCTO_ID WHERE DT.VENTA_ID = 1;

-- PRODUCTOS P
-- DETALLE_VENTAS DT
-- VENTAS T
-- CLIENTES C

--BUSCAR LOS DATOS DEL CLIENTE Y LOS PRODUCTOS RELACIONADOS EN LA VENTA ID 1
SELECT C.NOMBRE AS NOMBRE_CLIENTE,DT.VENTA_ID,
P.NOMBRE AS NOMBRE,
P.PRESENTACION, P.PRECIO, DT.CANTIDAD,
P.PRECIO * DT.CANTIDAD AS SUBTOTAL FROM CLIENTES C
INNER JOIN VENTAS V
ON C.CLIENTE_ID = V.CLIENTE_ID
INNER JOIN DETALLE_VENTAS DT 
ON V.VENTA_ID = DT.VENTA_ID
INNER JOIN PRODUCTOS P
ON P.PRODUCTO_ID = DT.PRODUCTO_ID WHERE DT.VENTA_ID = 1;


-- CALCULAR LA SUMATORIA DE LOS PRECIOS DE LOS PRODUCTOS DE LA VENTA CON ID 1
SELECT SUM(P.PRECIO * DT.CANTIDAD) AS SUBTOTAL, C.NOMBRE FROM CLIENTES C
INNER JOIN VENTAS V
ON C.CLIENTE_ID = V.CLIENTE_ID
INNER JOIN DETALLE_VENTAS DT 
ON V.VENTA_ID = DT.VENTA_ID
INNER JOIN PRODUCTOS P
ON P.PRODUCTO_ID = DT.PRODUCTO_ID GROUP BY C.NOMBRE;


COMMIT;







CREATE TABLE PRESTAMOS(
FOLIO NUMBER PRIMARY KEY,
CLAVE_LIBRO NUMBER,
NUMERO_CUENTA NUMBER,
FECHA_PRESTAMO DATE,
FECHA_DEVOLUCION DATE
);

CREATE TABLE LIBROS(
CLAVE_LIBRO NUMBER PRIMARY KEY,
TITULO NVARCHAR2(15),
TEMA NVARCHAR2(15),
AUTOR NVARCHAR2(20),
EDICION NVARCHAR2(15),
EDITORIAL NVARCHAR2(15),
NUM_PAGINAS NUMBER
);

ALTER TABLE PRESTAMOS ADD CONSTRAINT PRESTAMOS_FK_CLAVE_LIBRO
FOREIGN KEY(CLAVE_LIBRO)
REFERENCES LIBROS(CLAVE_LIBRO);








